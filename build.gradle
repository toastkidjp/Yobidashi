buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'application'
    id 'eclipse'
    id 'jacoco'
    id 'pmd'
    id 'findbugs'
}

sourceCompatibility = 1.8

version = '0.0.1'

mainClassName       = 'jp.toastkid.yobidashi.Main'
def defaultEncoding = 'UTF-8'
def jdkVersion      = '1.8'
def javafxHome      = System.getenv('JAVA_HOME')

[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

test.maxParallelForks = 4

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    provided
    forJar
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    provided project('javafx_css_generator')
    provided project('slide_show')
    provided project('script_runner')
    forJar fileTree(dir: 'script_runner', include: '*.jar')
    forJar fileTree(dir: 'javafx_css_generator', include: '*.jar')
    forJar fileTree(dir: 'slide_show', include: '*.jar')

    compile 'org.eclipse.collections:eclipse-collections:8.0.0'
    compile 'io.projectreactor:reactor-core:3.0.2.RELEASE'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.0'
    compile 'org.fxmisc.richtext:richtextfx:1.0.0-SNAPSHOT'
    compile 'com.jfoenix:jfoenix:1.0.0'

    // Logger
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.5-alpha'
}

compileJava {
    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.main.compileClasspath += configurations.testCompile
}

run {
    classpath += configurations.provided
}

test {
    classpath += configurations.provided
}

eclipse {
    classpath.defaultOutputDir = file('build_e')
    classpath {
        plusConfigurations += [ configurations.provided ]
    }
}

jar {
    manifest {
        attributes 'Main-Class' : mainClassName
    }
    destinationDir = projectDir
    // version = version + "_" + revHash()
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    from configurations.forJar.collect  { it.isDirectory() ? it : zipTree(it) }
}

startScripts {
    doLast {
        unixScript.text = "java -jar ../libs/$jar.archiveName"
        windowsScript.text = "java -jar ..\\libs\\$jar.archiveName"
    }
}

task del(type:Exec) {
    executable "rm"
    args "-r", "build/*"
}

task printRevHash() {
  println revHash()
}

def String revHash() {
  ext.revision = 'git rev-list --count HEAD'.execute().text.trim()
  ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
  return "r${revision}.${hash}"
}

pmd {
    ignoreFailures = true
    ruleSets = [
        'java-basic',
        'java-braces',
        'java-clone',
        'java-codesize',
        'java-design'
    ]
}

findbugs {
    ignoreFailures = true
}
