buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'application'
    id 'eclipse'
    id 'jacoco'
}

sourceCompatibility = 1.8

version = '0.0.1'

mainClassName   = 'jp.toastkid.yobidashi.Main'
def defaultEncoding = 'UTF-8'
def jdkVersion      = '1.8'
def javafxHome      = System.getenv('JAVA_HOME')

[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

repositories {
    mavenCentral()
}


//this one works with file dependencies. If you prefer

configurations {
    //we do not want to have jfxrt.jar in the classpath when creating the jar,
    //therefore a seperate configuration is required
    providedCompile
}

dependencies {

    providedCompile files("${javafxHome}/jre/lib/ext/jfxrt.jar")
    compile fileTree(dir: 'libs', include: '*.jar')

    compile 'org.eclipse.collections:eclipse-collections:8.0.0'
    compile 'io.projectreactor:reactor-core:3.0.2.RELEASE'
    compile 'org.apache.commons:commons-lang3:3.4'

    // Markdown parser.
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.0'

    compile 'org.fxmisc.richtext:richtextfx:0.7-M2'
    compile 'com.jfoenix:jfoenix:1.0.0'

    // Logger
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

compileJava {
    //add required JavaFX libs to compile classpath
    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.main.compileClasspath += configurations.runtime
    sourceSets.main.compileClasspath += configurations.testCompile
}

run {
    //add required JavaFX libs to runtime classpath
    classpath += configurations.providedCompile
    classpath += configurations.runtime
}
eclipse {
    classpath.defaultOutputDir = file('build')
}


//clear existing task actions and call ant task
jar {
    manifest {
        attributes 'Main-Class' : mainClassName
    }
    destinationDir = projectDir
    // version = version + "_" + revHash()
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

//create some smarter looking start scripts
startScripts {
    doLast {
        unixScript.text = "java -jar ../libs/$jar.archiveName"
        windowsScript.text = "java -jar ..\\libs\\$jar.archiveName"
    }
}

task del(type:Exec) {
    executable "rm"
    args "-r", "build/*"
}

task printRevHash() {
  println revHash()
}

def String revHash() {
  ext.revision = 'git rev-list --count HEAD'.execute().text.trim()
  ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
  return "r${revision}.${hash}"
}
